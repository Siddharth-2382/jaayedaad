datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assets        Asset[]
  preferences   Preference[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Asset {
  id           String        @id @default(cuid())
  name         String
  symbol       String
  quantity     String
  buyPrice     String
  buyCurrency  String        @default("INR")
  buyDate      DateTime
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transactions Transaction[]
}

model Preference {
  id            String  @id @default(cuid())
  publicProfile Boolean @default(false)
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id       String   @id @default(cuid())
  date     DateTime
  quantity String
  price    String
  type     String
  assetId  String   @unique
  asset    Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}
