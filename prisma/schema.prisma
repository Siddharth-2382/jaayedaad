datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String?
  image                 String?
  username              String?               @unique
  whitelisted           Boolean               @default(false)
  emailVerified         DateTime?
  accounts              Account[]
  assets                Asset[]
  inviteCode            InviteCode?
  preferences           Preference?
  sessions              Session[]
  usersManualCategories UsersManualCategory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AssetSource {
  manual
  twelvedata
  mfapi
  binance
}

model Asset {
  id                String               @id @default(cuid())
  name              String
  symbol            String?
  quantity          String
  buyPrice          String
  buyDate           DateTime
  userId            String
  buyCurrency       String               @default("INR")
  category          String
  exchange          String?
  currentPrice      String?
  source            AssetSource          @default(twelvedata)
  manualCategoryId  String?
  manualCategory    UsersManualCategory? @relation(fields: [manualCategoryId], references: [id], onDelete: Cascade)
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  assetPriceUpdates AssetPriceUpdate[]
  transactions      Transaction[]
}

enum PerformanceBarParameter {
  totalInvestment
  totalValue
  percentageChange
}

enum PerformanceBarOrder {
  Ascending
  Descending
}

model Preference {
  id                        String                  @id @default(cuid())
  publicVisibility          Boolean                 @default(false)
  userId                    String                  @unique
  defaultCurrency           String                  @default("INR")
  numberSystem              String                  @default("Indian")
  showHoldingsInPublic      Boolean                 @default(false)
  showMetricsInPublic       Boolean                 @default(false)
  performanceBarOrder       PerformanceBarOrder     @default(Ascending)
  performanceBarParameter   PerformanceBarParameter @default(percentageChange)
  user                      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dashboardAmountVisibility Boolean                 @default(true)
}

enum TransactionType {
  buy
  sell
}

model Transaction {
  id       String          @id @default(cuid())
  date     DateTime
  quantity String
  price    String
  type     TransactionType
  assetId  String
  asset    Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model UsersManualCategory {
  id     String  @id @default(cuid())
  name   String
  userId String
  icon   String
  assets Asset[]
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssetPriceUpdate {
  id      String   @id @default(cuid())
  price   String
  date    DateTime
  assetId String
  asset   Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model InviteCode {
  id           String        @id @default(cuid())
  code         String        @unique
  usesLeft     Int           @default(3)
  senderEmail  String        @unique
  user         User          @relation(fields: [senderEmail], references: [email], onDelete: Cascade)
  usersInvited InvitedUser[]
}

model InvitedUser {
  id           String     @id @default(cuid())
  inviteCodeId String
  userId       String     @unique
  inviteCode   InviteCode @relation(fields: [inviteCodeId], references: [id])
}
