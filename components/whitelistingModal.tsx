"use client";
import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogOverlay,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { checkInviteCode, validateInviteCode } from "@/services/inviteCode";

function WhitelistingModal({ whitelisted }: { whitelisted: boolean }) {
  const [inviteCodeValue, setInviteCodeValue] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [disabled, setDisabled] = useState(true);

  const verifyInviteCode = async (inviteCode: string) => {
    try {
      const validatedInviteCode = await checkInviteCode(inviteCode);
      if (validatedInviteCode) {
        setErrorMessage(
          `This invite code was generated by ${validatedInviteCode.senderEmail}`
        );
        setDisabled(false);
      } else {
        setErrorMessage("Invalid invite code");
        setDisabled(true);
      }
    } catch (error) {}
  };
  // Check for changes in invite code value
  useEffect(() => {
    const timerId = setTimeout(() => {
      if (inviteCodeValue) {
        if (inviteCodeValue.trim() !== "") {
          verifyInviteCode(inviteCodeValue);
        }
      } else {
        setErrorMessage("");
        setDisabled(true);
      }
    }, 1000);

    // Clear the timer on each change
    return () => clearTimeout(timerId);
  }, [inviteCodeValue]);

  const handleInviteCodeValueChange = async (value: string) => {
    setInviteCodeValue(value);
  };

  const handleVerifyInviteCode = async () => {
    const inviteCodeObject = await checkInviteCode(inviteCodeValue);
    if (inviteCodeObject) {
      const userWhitelisted = await validateInviteCode(inviteCodeObject);
      if (userWhitelisted) {
        window.location.reload();
      }
    }
  };

  return (
    <Dialog open={!whitelisted}>
      <DialogOverlay className="backdrop-blur-[6px] bg-transparent" />
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Enter your invite code to continue</DialogTitle>
          <DialogDescription>
            Get whitelisted for using Jaayedaad.com using a valid invite code.
          </DialogDescription>
        </DialogHeader>
        <div>
          <div>
            <Input
              value={inviteCodeValue}
              placeholder="Enter invite code"
              onChange={(e) => handleInviteCodeValueChange(e.target.value)}
            />
            <div className="w-full mt-4 inline-flex justify-between">
              <p>{errorMessage}</p>
              <Button
                className="disabled:pointer-events-auto disabled:hover:cursor-not-allowed"
                onClick={handleVerifyInviteCode}
                disabled={disabled}
              >
                Continue
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default WhitelistingModal;
